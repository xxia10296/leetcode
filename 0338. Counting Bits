

Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]
Example 2:

Input: 5
Output: [0,1,1,2,1,2]
Follow up:

It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
Space complexity should be O(n).
Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.

var countBits = function(num) {  
    var dp = [];
    dp[0] = 0;
    for ( var i = 1; i <= num; i++) {
        if (i % 2 === 0) {
            dp.push(dp[i/2]);
        } else {
            dp.push(dp[Math.floor(i/2)] + 1)
        }
    }
    return dp;
}

// var countBits = function(num) {
//     var result = [];
//     for ( var i = 0; i <= num; i++) {
//         let count = (i).toString(2).split("").filter(n=> n==1).length;
//         result.push(count)
//     }
//     return result;
// };
