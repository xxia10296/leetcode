
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21

Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: 
[−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.

Summary:
- Handle negative numbers, absolute value the input, and handle negative at the end
- Repeatedly extract the last digit and get it to the front of the new number
- x % 10 gives us the last digit of a number (ones place)
- x  / 10 gives us the rest of the number (exclude the ones place)
Let n be the number of digits in the input number:
Time: O(n) Linear
Space: O(1) Constant


var reverse = function(x){
    let res = 0;
    let y = Math.abs(x);
    let sign;
    if (x<0){
        sign=-1;
    } else if (x>=0){
        sign=1;
    }
    while(y > 0){
        res = res * 10 + y % 10;
        y = Math.floor(y / 10);
    }
    
    if(res > 2**31 + 1 || x < Math.pow(-2, 31)) return 0;
    return res*sign;
}

