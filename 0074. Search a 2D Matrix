

Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true
Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false

var searchMatrix = function(matrix, target) {
    if (matrix.length === 0) return false;
    let row = matrix.length;
    let col = matrix[0].length;
    let lo = 0, hi = row*col-1;
    while (lo <= hi) {
        let mid = lo + Math.floor((hi-lo)/2);
        let rowN = Math.floor(mid / col);
        let colN = Math.floor(mid % col);
        let midValue = matrix[rowN][colN];
        if (target === midValue) { return true; }
        if (target < midValue) {
            hi = mid -1;
        } else if (target > midValue) {
            lo = mid + 1
        }
    }
    return false
};
