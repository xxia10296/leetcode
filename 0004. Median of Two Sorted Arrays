There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
You may assume nums1 and nums2 cannot be both empty.

Summary: 1. Use binary search on both array so it fulfills the time requirement of (less than) O(log (m+n));
         2. 1) We set imin = 0; imax = len1; then start searching in [imin, imax];
            2) inside the while loop, set i = Math.floor((imin+imax)/2); j = half - i; half = Math.floor((len1+len2+1)/2);
            3) there're 3 situation we may encounter in while loop: 
               - we find the perfect cut, which fulfills the requirment: nums1[i-1] <= nums2[j] && nums1[i] >= nums2[j-1];
               - i is too larget, move it to left.  if ( i > imin && nums1[i-1] > nums2[j] ) 
               - i is too small, move it to right.  if ( i < imax && nums1[i] < nums2[j-1] )
            4) After we find the perfect cut, LEFT and Right, 
               - if (len1+len2) is odd, we return LEFT;
               - if (len1+len2) is even, we return (LEFT + RIGHT) / 2;
   
   
Solution 1: binary search   
time: O(log(min(m,n));
space: O(1) constant storage for local variables;

var findMedianSortedArrays = function(nums1, nums2) {
    if(nums1.length > nums2.length) return findMedianSortedArrays(nums2, nums1);
    const lenA = nums1.length, lenB = nums2.length;
    let lo = 0, hi = lenA;
    
    while(lo <= hi) {
        let cutA = lo + Math.floor((hi-lo)/2) ;
        let cutB = Math.floor((lenA + lenB + 1)/2) - cutA;
        let l1 = cutA === 0 ? -Infinity : nums1[cutA - 1];
        let r1 = cutA === lenA ? Infinity : nums1[cutA];
        let l2 = cutB === 0 ? -Infinity : nums2[cutB - 1];
        let r2 = cutB === lenB ? Infinity : nums2[cutB];
        
        if(l1 <= r2 && l2 <= r1) {
            if((lenA + lenB) %2 !== 0) return Math.max(l1, l2);
            return (Math.max(l1, l2) + Math.min(r1, r2)) / 2;
        } else if(l1 > r2) {
            hi = cutA - 1;
        } else {
            lo = cutA + 1;
        }
    }
};

Solution 2: Linear scan to create a merge array

// O(m+n) ||  O(m+n)
var findMedianSortedArrays = function(nums1, nums2) {
    let n1 = nums1.length, n2 = nums2.length;
    let merge = [];
    let i = 0, j = 0;
    while (i<n1 && j<n2) {
        if (nums1[i] >= nums2[j]) {
            merge.push(nums2[j]); j++;
        } else {
            merge.push(nums1[i]);
            i++;
        }
    };
    while (i<n1) {
        merge.push(nums1[i]); i++;
    };
    while (j<n2) {
        merge.push(nums2[j]); j++;
    };
    
    let median;
    if (merge.length %2 === 0) {
        median = (merge[Math.floor(merge.length/2)] + merge[Math.floor(merge.length/2)-1])/2;
    } else {
        median = merge[Math.floor(merge.length/2)]
    };
    return median;
};

