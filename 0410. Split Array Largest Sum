

Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.

Note:
If n is the length of array, assume the following constraints are satisfied:

1 ≤ n ≤ 1000
1 ≤ m ≤ min(50, n)
Examples:

Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.

var splitArray = function(nums, m) {
    let maxSum = 0, minSum = 0;
    for(let num of nums) {
        minSum = Math.max(num, minSum);
        maxSum += num;
    }
    let lo = minSum, hi = maxSum;
    while (lo <= hi) {
        let mid = lo + Math.floor((hi-lo)/2);
        let p = canSplit(nums, mid)
        if (p <= m) {
            hi = mid -1;
        }
        else {
            lo = mid + 1;
        }
    }
    return lo
};

var canSplit = function(nums, mid) {
    let p = 1, tempSum = 0;
    for (let num of nums) {
        if (tempSum + num > mid) {
            tempSum = num;
            p++;
        } else {
            tempSum += num
        }
    }
    return p;
}

