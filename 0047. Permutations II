Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

var permuteUnique = function(nums) {
//    nums.sort((a, b) => a-b);
    let res = [];
    dfs(nums, [], res);
    return res;
};

var dfs = function(nums, cur, res) {
    if (cur.length && nums.length===0) {
        res.push(cur);
    } else {
        let visited = new Set();
        for (let i = 0; i < nums.length; i++) {
            if (visited.has(nums[i])) continue;
            let newArr = nums.slice(0, i).concat(nums.slice(i+1));
            let newCur = cur.concat(nums[i]);
            dfs(newArr, newCur, res)
            visited.add(nums[i])
        }
    }
}
