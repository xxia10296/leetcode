Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.

Note:
The sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.

Example 1:

Input: nums = [1, -1, 5, -2, 3], k = 3
Output: 4 
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.

// var maxSubArrayLen = function(nums, k) {
//     let longest = 0;
//     let pre = new Array(nums.length);
//     pre[0] = nums[0];
//     for (let i = 1; i < nums.length; i++) {
//         pre[i] = pre[i-1]+nums[i]
//     };
    
//     for (let i = 0; i < pre.length; i++) {
//         let curSum = 0;
//         for (let j = 0; j < pre.length; j++) {
//             curSum = pre[j]-pre[i]+nums[i];
//             if (curSum === k) {
//                 longest = Math.max(longest, j-i+1)
//             }
//         }
//     }
//     return longest;
// };
