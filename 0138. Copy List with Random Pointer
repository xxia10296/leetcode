A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does not point to any node.

var copyRandomList = function(head) {
    if (head === null || head.length === 0) return head;
    let map = new Map();
    let cur = head;
    while (cur) {
        map.set(cur, new Node(cur.val, null, null));
        cur = cur.next;
    };
    cur = head;
    while (cur) {
        map.get(cur).next = map.get(cur.next) || null;
        map.get(cur).random = map.get(cur.random) || null;
        cur = cur.next
     };
    
    return map.get(head)
};
