

Given a linked list, remove the n-th node from the end of list and return its head.
Example:
Given linked list: 1->2->3->4->5, and n = 2.
After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:Given n will always be valid.
Follow up: Could you do this in one pass?


Summary: - Use 2 pointers that are n nodes apart from each other. (slow = i; fast = n+i) and let fast goes to the end
         - now delete the next node of slow, and let slow points to next.next. 
         
Time: O(L) .  L = nodes of the linkedlist
space: O(1) 


var removeNthFromEnd = function(head, n) {
    var start = new ListNode(null);
    start.next = head;
    let slow = start,
        fast = head;
    slow.next = head;
    
    if(head.next === null){
        return null
    }
    
    for(var i = 0; i < n; i++){       // Advances first pointer so that the gap between first and second is n nodes apart
        fast = fast.next;
    }
    
    while(fast !== null){            // Move first to the end, maintaining the gap
        slow = slow.next;
        fast = fast.next;
    }
    
    slow.next = slow.next.next;
    return start.next;
};
