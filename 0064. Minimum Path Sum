Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

var minPathSum = function(grid) {
    let m = grid.length, n = grid[0].length;
    let dp = new Array(m).fill(Infinity).map(val => new Array(n).fill(Infinity));
    dp[0][0] = grid[0][0];
    
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            if (i !== 0 && j !== 0) {
                dp[i][j] = grid[i][j] + Math.min(dp[i-1][j], dp[i][j-1]);
            } else if (j !== 0) {
                dp[0][j] = grid[0][j] + dp[0][j-1];
            } else if (i !== 0) {
                dp[i][0] = grid[i][0] + dp[i-1][0];
            };
        };
    };
    return dp[m-1][n-1]
};
