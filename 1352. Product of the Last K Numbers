Implement the class ProductOfNumbers that supports two methods:

1. add(int num)

Adds the number num to the back of the current list of numbers.
2. getProduct(int k)

Returns the product of the last k numbers in the current list.
You can assume that always the current list has at least k numbers.
At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.

Example:

Input
["ProductOfNumbers","add","add","add","add","add","getProduct","getProduct","getProduct","add","getProduct"]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]

Output
[null,null,null,null,null,null,20,40,0,null,32]


var ProductOfNumbers = function() {
    this.prod = [1];
};

ProductOfNumbers.prototype.add = function(num) {
    if (num === 0) {
        this.prod = [1]
    } else {
        this.prod.push(this.prod[this.prod.length-1]*num)
    };
};

ProductOfNumbers.prototype.getProduct = function(k) {
    return (this.prod[this.prod.length-1]/this.prod[this.prod.length-1-k]) || 0;
};
