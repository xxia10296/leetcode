

Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example, given n = 3, a solution set is:
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

https://www.youtube.com/watch?v=7UsbkYWWUX0
Summary: Use DFS recursion tree  
  for example: n = 2
                                 (
                               l=1, r=2
                 ((                                 ()
              l=0, r=2                            l=1, r=1
    
        (((             (()                 ()(                ())       
      l=-1; r=2         l=0, r=1            l=0, r=1           l=1,r=0
                        (())                 ()()              ())(
                        l=0, r=0            l=0, r=0            l=0,r=0     (still not valid, cuz l should before r)



Time:
Space:

var generateParenthesis = function(n) {
    let result=[];
    if (n<=0){
        return result;
    }
    dfs(n, n, "", result)
    return result;
    
    function dfs(left, right, item, result) {
        //base case
        if (left===0 && right===0){
            result.push(item);
            return
        }
        // recursive case
        if (left>0){
            dfs(left-1, right, item+'(', result)
        }
        if (right>0 && left < right){
            dfs(left, right-1, item+')', result)
        }
    }  
};

