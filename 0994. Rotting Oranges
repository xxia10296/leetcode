In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

// hardest: maintain queue size && push all direction children to the queue after poping out parent
// keep the coordinate of rotten && numbers of fresh, decrememt fresh when it become rotten
// if fresh === 0, return level(minute); else return -1;

var orangesRotting = function(grid) {
    let m = grid.length, n = grid[0].length;
    let queue = [];
    let level = 0;
    let fresh = 0;
    for (let i = 0; i < m; i++) {
        for (let j = 0; j < n; j++) {
            if (grid[i][j] === 2) {
                queue.push([i, j]);
            } else if (grid[i][j] === 1) {
                fresh++;
            }
        };
    };
    
    const directions = [[-1, 0], [1,0], [0,-1], [0,1]];
    while (queue.length && fresh) {
        let count = queue.length;
        while (count) {
            let cur = queue.shift();            
            for (let i = 0; i < directions.length; i++) {
                let allX = cur[0] + directions[i][0];
                let allY = cur[1] + directions[i][1];
                
                if (allX < 0 || allX >= m || allY < 0 || allY >= n || grid[allX][allY] !== 1) continue;
                grid[allX][allY] = 2;
                queue.push([allX, allY]);
                fresh--;
            }
            count--;
        };
        level++;
    };
    return fresh ? -1 : level;
};
