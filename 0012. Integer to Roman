

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Summary:  
 1 create a table of the known correlations between integers and roman numerals.  include the 6 edge cases where subtractions are used to create roman numbers
 2 extract the keys from that table into an array,  and sort  array in descending order
 3 loop over that array
 4 for every number in the array, create a while loop that runs while number < = the integer.  if yes, then subtract the number from the integer AND append the number's roman number counterpart to the result string
 5 if the while loop has stopped running, check whether the integer is within range - if its <=0 then we are done. break out of the outer for loop, otherwise continue the for loop

const mapping = [
    [1000, 'M'], [900, 'CM'], [500, 'D'], [400, 'CD'], [100, 'C'], [90, 'XC'], [50, 'L'], [40, 'XL'], [10, 'X'], [9, 'IX'], [5, 'V'], [4, 'IV'], [1, 'I']
];

var intToRoman = function(num) {
    let str = '';

    for (let i = 0; i < mapping.length; i++) {
        const [val, char] = mapping[i];

        if (num >= val) {
            while (num >= val) {
                num -= val;
                str += char;
            }
        }
    }

    return str;
};
