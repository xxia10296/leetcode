Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.
Note: A leaf is a node with no children.
Example:
Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]


const pathSum = function(root, sum) {
    let res = [];
    let path = [];
    dfs(root, sum, path, res);
    return res;
}
const dfs = function(node, sum, path, res) {
    if (!node) return;
    path.push(node.val);
    if (!node.left && !node.right && sum === node.val) {
        res.push([...path]);
    }
    dfs(node.left, sum-node.val, path,res);
    dfs(node.right, sum-node.val, path,res);
    path.pop()
}
