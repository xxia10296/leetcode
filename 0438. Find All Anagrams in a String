

Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

var findAnagrams = function(s, p) {
    let hash = {};
    let result = [];
    let pn = p.length, sn = s.length;
    if (sn < pn ) return result;
    for (let c in p) {
        hash[p[c]] = 1+ ( hash[p[c]] || 0);
    }
    let i = 0, j = 0, count = p.length;
    while (j < sn) {
        if (hash[s[j++]]-- >= 1) count--;
        if (count === 0) result.push(i);
        if ((j - 1) - i + 1 === pn && hash[s[i++]]++ >= 0) count++;
    }
    return result;
};
