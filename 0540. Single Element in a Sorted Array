

You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:
Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:
Input: [3,3,7,7,10,11,11]
Output: 10
Note: Your solution should run in O(log n) time and O(1) space.

// var singleNonDuplicate = function(nums) {
//     let lo = 0, hi = nums.length-1;
//     while (lo < hi) {
//         let mid = lo + Math.floor((hi-lo)/2);
//         if (mid % 2 === 0) {
//             if (nums[mid] === nums[mid-1]) {
//                 hi = mid - 2;
//             } else if (nums[mid] !== nums[mid-1] && nums[mid] !== nums[mid+1]) {
//                 lo = mid;
//             } else {
//                 lo = mid + 2;
//             }
//         } else if (mid % 2 !== 0) {
//             if (nums[mid] === nums[mid+1]) {
//                 hi = mid - 1;
//             } else {
//                 lo = mid + 1;
//             }
//         }
//     }
//     return nums[lo];
// };

var singleNonDuplicate = function(nums) {
    let lo = 0, hi = nums.length-1;
    while (lo < hi) {
        let mid = lo + Math.floor((hi-lo)/2);
        if (mid % 2 === 0) {
            if (nums[mid] === nums[mid+1]) {
                lo = mid + 2;
            } else {
                hi = mid -1;
            }
        } else if (mid % 2 !== 0) {
            if (nums[mid] === nums[mid+1]) {
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
    }
    return nums[lo]
}


/*
4 scenarios 
[1,1,2]
 0 1 2
[1,1,2,3,3,4,4,8,8]
 0 1 2 3 4 5 6 7 8
[1,1,3,3,4,4,7,8,8]
 0 1 2 3 4 5 6 7 8
[3,3,7,7,10,11,11]
 0 1 2 3  4  5  6 
[1,3,3,7,7,11,11]
 0 1 2 3 4  5  6 
*/


