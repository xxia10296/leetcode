Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
  
  
  
// bfs: traver by level, keep track of queue size and res.push(last one on each level)
// var rightSideView = function(root) {
//     let res = [];
//     if (!root) return res;
//     let queue = [root];
//     while (queue.length) {
//         let size = queue.length;
//         for (let i = 0; i < size; i++) {
//             let cur = queue.shift();
//             if (i === size -1) {
//                 res.push(cur.val);
//             };
//             if (cur.left) queue.push(cur.left);
//             if (cur.right) queue.push(cur.right);
//         }
//     }
//     return res;
// };

// dfs: traver order (n-r-l); res.push(first node at every level)
var rightSideView = function(root) {
    let res = [];
    if (!root) return res;
    var dfs = function(root, level) {
        if (!root) return;
        if (level === res.length) res.push(root.val);
        dfs(root.right, level+1);
        dfs(root.left, level+1);
    };
    dfs(root, 0);
    return res;
};
