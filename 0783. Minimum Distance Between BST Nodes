Given a Binary Search Tree (BST) with the root node root, return the minimum difference between the values of any two different nodes in the tree.
Example :
Input: root = [4,2,6,1,3,null,null]
Output: 1
Explanation:
Note that root is a TreeNode object, not an array.
The given tree [4,2,6,1,3,null,null] is represented by the following diagram:

          4
        /   \
      2      6
     / \    
    1   3  
while the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.

var minDiffInBST = function(root) {
    let allNodes = inOrder(root);
    console.log(allNodes)
    let minDiff = Infinity;
    
    for (let i = 0; i < allNodes.length-1;i++) {
        curDiff = Math.abs(allNodes[i+1]-allNodes[i]);
        if (curDiff < minDiff) { minDiff = curDiff; }
    }
    return minDiff;
}

var inOrder = function(node, res = []) {
    if (!node) return;
    if (node.left) inOrder(node.left, res);
    res.push(node.val);
    if (node.right) inOrder(node.right, res);
    return res;
}

// var minDiffInBST = function(root) {
//     if (!root) return;
//     let minDiff = Infinity;
//     let allNodes = [];
    
//     function inOrder(node) {
//         if (node.left) inOrder(node.left);
//         allNodes.push(node.val);
//         if (node.right) inOrder(node.right);
//     };
//     inOrder(root);
    
//     for (let i = 0; i < allNodes.length-1; i++) {
//         curDiff = Math.abs(allNodes[i+1] - allNodes[i]);
//         minDiff = Math.min(minDiff, curDiff)
//     }
//     return minDiff;
// };
