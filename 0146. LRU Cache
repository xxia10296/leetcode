//js Map insertion order
var LRUCache = function(capacity) {
    this.map = new Map();
    this.capacity = capacity; 
};

/** 
 * @param {number} key
 * @return {number}
 */
LRUCache.prototype.get = function(key) {
    // 2 cases: if none, return -1
    // if it has, save its value first, delete it, then add to the top (most recent), return value
    if (this.map.has(key)) {
        let valueToAdd = this.map.get(key);
        this.map.delete(key);
        this.map.set(key, valueToAdd);
        return valueToAdd;
    } else {
        return -1;
    }
};

/** 
 * @param {number} key 
 * @param {number} value
 * @return {void}
 */
LRUCache.prototype.put = function(key, value) {
    // 3 cases: 1)if not exists && map is full, delete oldest, add it to the top
    // 2) if not exists && map has extra space, add it to the top
    // 3) if already exists, delete old position, add it to the top
    let val = this.get(key);
    if (val === -1) {
        if (this.map.size === this.capacity) {
            this.map.delete(this.map.keys().next().value);
            this.map.set(key, value);
        } else {
            this.map.set(key, value);
        }
    } else if (val !== -1) {
        this.map.delete(key);
        this.map.set(key, value);
    }
};   
