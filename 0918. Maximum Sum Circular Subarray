

Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)

 

Example 1:

Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3
Example 2:

Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10
Example 3:

Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4

Note:

-30000 <= A[i] <= 30000
1 <= A.length <= 30000


var maxSubarraySumCircular = function(A) {
    // 3 cases : non-circular; circular; all negative
    let curMax = curMin = total = 0;
    let sumMax = sumMin = A[0];
    for (let i= 0; i < A.length; i++) {
        total += A[i];
        curMax = Math.max(curMax+A[i], A[i]);
        sumMax = Math.max(sumMax, curMax);
        curMin = Math.min(curMin+A[i], A[i]);
        sumMin = Math.min(curMin, sumMin);
    }
    if (sumMax < 0) { 
        return sumMax; 
    } else {
        return Math.max(sumMax, total-sumMin);
    }
};
