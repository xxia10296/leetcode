Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.

Note: The input string may contain letters other than the parentheses ( and ).

Example 1:

Input: "()())()"
Output: ["()()()", "(())()"]
Example 2:

Input: "(a)())()"
Output: ["(a)()()", "(a())()"]
Example 3:

Input: ")("
Output: [""]



// O(2^ (all unbalanced parentheses)) || ~O(n^2)
// 3 steps:
// (1) check valid 
// (2) calculate unbalanced '(' && unbalanced ')'
// (3) dfs: permutation (delete or keep that unbalanced one) => O(2^(all unbalanced parentheses))
//    key is to delete first one when more than 2 are the same

var removeInvalidParentheses = function(s) {
    if (s === null || s.length === 0) return [''];
    let res = [];
    
    // (1) check valid 
    var valid = function(s) {
        let count = 0;
        for (let each of s) {
            if (each === "(") count++;
            if (each === ")") count--;
            if (count < 0) return false;
        };
        return count === 0;
    };
    
    // (2) calculate unbalanced '(' && unbalanced ')'
    let l = 0, r = 0;
    for (let each of s) {
        if (each === "(") l++;
        if (l === 0 && each === ")")  r++;
        else if (each === ")") l--;
    };

    // (3) dfs:remember to delete 1st duplicate parentheses
    var dfs = function(str, index, l, r) {
        if (l === 0 && r === 0) {
            if (valid(str)) res.push(str);
            return;
        };
        for (let i = index; i < str.length; i++) {
            if (i !== index && str[i] === str[i-1]) continue;
            
            if (str[i] === "(" || str[i] === ")") {
                let cur = str.substr(0, i) + str.substr(i+1);
                if (r > 0 && str[i] === ")")  dfs(cur, i, l, r-1);
                if (l > 0 && str[i] === "(")  dfs(cur, i, l-1, r);
            };
        };
    };
    
    dfs(s, 0, l, r);
    return res;
};
