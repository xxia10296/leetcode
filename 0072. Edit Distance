Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.

You have the following 3 operations permitted on a word:

Insert a character
Delete a character
Replace a character
Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

/**
 * @param {string} word1
 * @param {string} word2
 * @return {number}
 
[
  [ 0, 1, 2, 3 ],
  [ 0, 1, 2, 3 ],
  [ 0, 1, 2, 3 ],
  [ 0, 1, 2, 3 ],
  [ 0, 1, 2, 3 ],
  [ 0, 1, 2, 3 ]
]
 */

var minDistance = function(word1, word2) {
    let n1 = word1.length, n2 = word2.length;
    const dp = [];
    for (let i = 0; i <= n1; i++) {
        dp[i] = [];
        for (let j = 0; j <= n2; j++) {
            dp[i][j] = 0;
        }
    }
    // 2 base cases: empty
    for (let j = 0; j <= n2; j++) {
        dp[0][j] = j;
    }
    for (let i = 0; i <= n1; i++) {
        dp[i][0] = i;
    }
    
    for (let i = 1; i <= n1; i++) {
        for (let j = 1; j <= n2; j++) {
            if (word1.charAt(i-1) === word2.charAt(j-1)) { 
                dp[i][j] = dp[i-1][j-1]; 
            } else {
            dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1;
            }
        } 
    }
    return dp[n1][n2]
};
