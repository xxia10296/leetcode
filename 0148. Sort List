Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

// hardest: require time O(nlogn) space O(1) => (divide conquer) merge sort(bottom-up) no recur, iterativ
// use fast slow to find mid, split to n, n/2, n/4, n/8.....lists, then merger sorted lists
var sortList = function(head) {
    if (!head || !head.next) return head;
    let fast = head, slow = head;
    while (fast.next && fast.next.next) {
        slow = slow.next;
        fast = fast.next.next;
    }
    let mid = slow.next;
    slow.next = null;
    return merge(sortList(head), sortList(mid));
};

var merge = function(l1, l2) {
    if (l1===null) return l2;
    if (l2===null) return l1;
    let dummy = new ListNode();
    let cur = dummy;
    while (l1 && l2) {
        if (l1.val <= l2.val) {
            cur.next = l1;
            l1 = l1.next;
        } else {
            cur.next = l2;
            l2 = l2.next;
        }
        cur = cur.next;
    }
    if (l1=== null) cur.next = l2;
    if (l2 === null) cur.next = l1;
    return dummy.next;
}
