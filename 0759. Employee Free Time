We are given a list schedule of employees, which represents the working time for each employee.

Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order.

Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.

(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays. For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined).  Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.
Example 1:

Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
Output: [[3,4]]
Explanation: There are a total of three employees, and all common
free time intervals would be [-inf, 1], [3, 4], [10, inf].
We discard any intervals that contain inf as they aren't finite.

// flatten->merger->scan
var employeeFreeTime = function(schedule) {
    let all = [];
    for (let each of schedule) {
        for (let el of each) {
            all.push(el);
        };
    };
    all.sort((a, b) => a['start']-b['start']);
    
    let idx = 0;
    let merge = [all[idx]];
    for (let i = 1; i < all.length; i++) {
        if (merge[idx]['end'] >= all[i]['start']) {
            merge[idx]['end'] = Math.max(merge[idx]['end'], all[i]['end']);
            merge[idx]['start'] = Math.min(merge[idx]['start'], all[i]['start']);
        } else {
            merge.push(all[i]);
            idx++;
        };
    };
    let res = [];
    for (let i = 0; i < merge.length-1; i++) {
        if (merge[i]['end'] < merge[i+1]['start']) {
            let freeTime = new Interval(merge[i]['end'], merge[i+1]['start'])
            res.push(freeTime)
        }
    };
    return res;
};
