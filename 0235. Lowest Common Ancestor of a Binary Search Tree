Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given binary search tree:  root = [6,2,8,0,4,7,9,null,null,3,5]

var lowestCommonAncestor = function(root, p, q) {
    while (root) {
        if (root.val > p.val && root.val > q.val) {
            root = root.left;
        }
        else if (root.val < p.val && root.val < q.val) {
            root = root.right;
        } else {
            return root;
        }
    }
    return null;
}

// var lowestCommonAncestor = function(root, p, q) {
//     if (!root) return root;
//     if (root.val > p.val && root.val > q.val) {
//         return lowestCommonAncestor(root.left, p, q)
//     } 
//     if (root.val < p.val && root.val < q.val) {
//         return lowestCommonAncestor(root.right, p, q)
//     } else {
//         return root;
//     };
// };
