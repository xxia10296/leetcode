var rob = function(nums) {
    let rob = 0, notRob = 0;
    for (num of nums) {
        let pre = Math.max(rob, notRob);
        rob = notRob + num;
        notRob = pre;
    };
    return Math.max(notRob, rob);
};

// dp1: dp[i-1][j] XX dp[i][j]   result: dp[last][j] (aggregation)
var rob = function(nums) {
    if (nums.length === 0) return 0;
    let dp = new Array(nums.length).fill().map(() => new Array(2).fill(0));
    dp[0][0] = 0;
    dp[0][1] = nums[0];
    for (let i = 1; i < nums.length; i++) {
        dp[i][0] = Math.max(dp[i-1][1], dp[i-1][0]);
        dp[i][1] = dp[i-1][0] + nums[i];
    };
    let res = Math.max(dp[nums.length-1][0], dp[nums.length-1][1]);
    return res;
};


// brute force O(n**2) => recursion+memo O(n) || O(n)
// var rob = function(nums) {
//     if (nums.length === 0) return 0;
//     let res = [];
//     res[0] = nums[0];
//     res[1] = Math.max(nums[0], nums[1]);
    
//     for (let i = 2; i < nums.length; i++) {
//          res[i] = Math.max(res[i-2] + nums[i], res[i-1]);
//     };
//     return res[nums.length-1];
// };
