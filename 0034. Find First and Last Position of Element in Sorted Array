

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

var searchRange = function(nums, target) {
    let result = [];
    result[0] = findStart(nums,target);
    result[1] = findEnd(nums,target);
    return result;
    
};

var findStart = function(nums, target) {
    let index = -1;
    let lo = 0, hi = nums.length-1;
    while (lo <= hi) {
        let mid = lo + Math.floor((hi-lo)/2);
        if (nums[mid] === target) { index = mid }
        if (nums[mid] >= target) { hi = mid -1 }
        else if (nums[mid] < target) { lo = mid + 1}
    }
    return index;
};

var findEnd = function(nums, target) {
    let index = -1;
    let lo = 0, hi = nums.length-1;
    while (lo <= hi) {
        let mid = lo + Math.floor((hi-lo)/2);
        if (nums[mid] === target) { index = mid }
        if (nums[mid] <= target) { lo = mid + 1 }
        else if (nums[mid] > target) { hi = mid -1}
    }
    return index;
};
