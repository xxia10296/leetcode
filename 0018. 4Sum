

Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = 
target? Find all unique quadruplets in the array which gives the sum of target.

Note:
The solution set must not contain duplicate quadruplets.
Example:
Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.
A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]


Summary: Use Set & 2 pointers, similar to 3sum
Time: O(n^3)
Space: O(1)


var fourSum = function(nums, target) {
    var res = [];
    if(nums.length === 0) return res;
    nums.sort(function(a,b) {return a-b});
    var s = new Set();
    for(let i = 0; i <= nums.length-3; i++) {
        var t1 = target-nums[i];
        for(let j = i+1; j < nums.length; j++) {
            var t2 = t1-nums[j];
            var l = j+1;
            var r = nums.length-1;
            while(l < r) {
                let sum = nums[l]+nums[r];
                if(sum === t2) {
                    if(!s.has(''+nums[i]+nums[j]+nums[l]+nums[r])) {
                        res.push([nums[i], nums[j], nums[l], nums[r]]);
                        s.add(''+nums[i]+nums[j]+nums[l]+nums[r]);
                    }
                    l++;
                    r--;
                } else if(sum < t2) {
                    l++;
                } else {
                    r--;
                }
            }
        }
    }
    return res;
};
