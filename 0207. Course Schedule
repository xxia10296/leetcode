There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?
Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.



// topological + BFS : check if cycle exists in a directed graph
var canFinish = function(numCourses, prerequisites) {
    // inDegree array: store IN-arrows of each node
    // create graph/map with (key: parent; value: children) & update inDegree[child]
    let inDegree = new Array(numCourses).fill(0);
    let map = new Map();
    for (let i = 0; i < prerequisites.length; i++) {
        if (map.has(prerequisites[i][1])) {
            map.get(prerequisites[i][1]).push(prerequisites[i][0])
        } else {
            map.set(prerequisites[i][1], [prerequisites[i][0]]);
        };
        inDegree[prerequisites[i][0]]++;
    };
    
    // BFS: push each node (with inDegree = 0) to queue
    // after it exit from queue, check its children array and decrememnt inDegree[child]
    let queue = [];
    for (let i = 0; i < inDegree.length; i++) {
        if (inDegree[i] === 0) queue.push(i);
    };
    while (queue.length) {
        let exit = queue.shift();
        if (map.has(exit)) {
            for (let each of map.get(exit)) {
                inDegree[each]--;
                if (inDegree[each] === 0) {
                    queue.push(each);
                };
            };
        };
        
    };
    for (let i = 0; i < inDegree.length; i++) {
        if (inDegree[i] !== 0) return false;
    }
    return true;
};
