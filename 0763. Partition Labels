A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.
Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.

var partitionLabels = function(S) {
    let map = new Map();
    let res = [];
    for (let i = 0; i < S.length; i++) {
        map.set(S[i], i);
    };
    let start = 0, end = 0;
    for (let i = 0; i < S.length; i++) {
        end = Math.max(end, map.get(S[i]));
        if (i === end) {
            res.push(end-start+1);
            start = end + 1;
        };
    };
    return res;
};
