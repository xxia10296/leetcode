

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and 
each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Summary: create a new list l3, and new dummy node. Sum up l1 and l2 by each digit. 
         The key is to have digital = sum %10, and and carry = Math.floor(sum/10) to next right node.
         Handle the case when l1, l2 with different length.
         
Time complexity : O(max(m,n)). Assume that mm and nn represents the length of l1l1 and l2l2 respectively, the algorithm 
above iterates at most max(m,n) times.    
Space complexity : O(max(m,n)). The length of the new list is at most max(m,n)+1.

var addTwoNumbers = function(l1, l2) {
    let l3 = new ListNode(0);         // create new node 
    let result = l3;                  // to store the sum by each digit
    let carry = 0;             

    // until list1, list2 have no value，and carry = 0 
    while(l1 || l2 || carry > 0){
        let sum = 0;                  // place sum inside while loop because it clear by each digit summation
        // handle the case when l1, l2 with different lengths
        if(l1 !== null){
            sum += l1.val;
            l1 = l1.next;
        }
        if(l2!==null){
            sum += l2.val;
            l2 = l2.next;
        }
        // 如果之前有進位，carry = 1；沒有的話carry = 0
        sum += carry;
        l3.next = new ListNode(sum%10); // digit = sum % 10
        carry = Math.floor(sum/10);     // carry = sum / 10
        l3 = l3.next;
    }
    return result.next;
}


https://www.youtube.com/watch?v=L0xveBXriKc
