You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Ideas:
(2 -> 4 -> 3)
(5 -> 6 -> 4)

carry=0
digit: 2+5+0=7%10=7
carry: 7/10=0 //round down

digit: 4+6+0=10%10=0
carry: 10/10=1 //add to next 

digit: 3+4+1=8%10=8
carry: 8/10=0

answer: 7->0->8

JS solution:
/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */

var addTwoNumbers=function(l1, l2){
  var carry=0;
  var result = new ListNode(0);
  var cur=result;

  while(l1 && l2){
    var digit=l1.val+l2.val+carry;
    var next= digit%10;
    carry=Math.floor(digit/10);
    cur.next=new ListNode(next);
    cur=cur.next;
    l1=l1.next;
    l2=l2.next;
  }
  while(l1){
    var digit=l1.val+carry;
    var next=digit%10;
    carry=Math.floor(digit/10);
    cur.next=new ListNode(next);
    cur=cur.next;
    l1=l1.next;
  }
    while(l2){
    var digit=l2.val+carry;
    var next=digit%10;
    carry=Math.floor(digit/10);
    cur.next=new ListNode(next);
    cur=cur.next;
    l2=l2.next;
  }
    if(carry>0){
    cur.next=new ListNode(carry);
  }
  return result.next;
}
