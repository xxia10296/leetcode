// amortize, improved time(constant) & space(constant)
var MyQueue = function() {
    this.stack1 = [];
    this.stack2 = [];
};

MyQueue.prototype.push = function(x) {
    this.stack1.push(x);
};

MyQueue.prototype.pop = function() {
    if (this.stack2.length === 0) {
        while (this.stack1.length) {
            this.stack2.push(this.stack1.pop());
        }
    }
    return this.stack2.pop();
};

MyQueue.prototype.peek = function() {
    if (this.stack2.length === 0) {
        while (this.stack1.length) {
            this.stack2.push(this.stack1.pop());
        };
    }
    return this.stack2[this.stack2.length-1];
};


MyQueue.prototype.empty = function() {
    return this.stack1.length === 0 && this.stack2.length === 0;
};

// var MyQueue = function() {
//     this.stack1 = [];
//     this.stack2 = [];
// };

// /**
//  * Push element x to the back of queue. 
//  * @param {number} x
//  * @return {void}
//  */
// MyQueue.prototype.push = function(x) {
//     this.stack1.push(x);
// };

// /**
//  * Removes the element from in front of queue and returns that element.
//  * @return {number}
//  */
// MyQueue.prototype.pop = function() {
//     while (this.stack1.length) {
//         this.stack2.push(this.stack1.pop());
//     };
//     let pop = this.stack2.pop();
//     while (this.stack2.length) {
//         this.stack1.push(this.stack2.pop());
//     };
//     return pop;
// };

// /**
//  * Get the front element.
//  * @return {number}
//  */
// MyQueue.prototype.peek = function() {
//     while (this.stack1.length) {
//         this.stack2.push(this.stack1.pop());
//     };
//     let peek = this.stack2.pop();
//     this.stack2.push(peek);
//     while (this.stack2.length) {
//         this.stack1.push(this.stack2.pop());
//     };
//     return peek;
// };

// /**
//  * Returns whether the queue is empty.
//  * @return {boolean}
//  */
// MyQueue.prototype.empty = function() {
//     return this.stack1.length === 0;
// };
