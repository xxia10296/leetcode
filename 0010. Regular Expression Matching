

Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).



Solution 1: DFS

var isMatch = function(str, pattern) {
    // if pattern and string are empty, it's a match, return true otherwise return false
    if (!pattern) return false;

    // check if the first character in pattern and str match
    // or if the first character of pattern is the . wild card
	let firstCharMatch = str && (pattern[0] === str[0] || pattern[0] === '.');

    // If the pattern length is at least 2 and the second character is a * we check
    // both paths where the next character in the string is the same as the previous
    // and if the next character in the string is different
    if (pattern.length > 1 && pattern[1] === '*') {
        return isMatch(str, pattern.substr(2)) || (firstCharMatch && isMatch(str.substr(1), pattern))
    } else {
        return firstCharMatch && isMatch(str.substr(1), pattern.substr(1));
    }
        // otherwise we continue checking if the next character in the string
        // matches the next character in the pattern
};

Solution 2: DP
Summary: 
        - This Solution use 2D DP. beat 90% solutions.
        - Here are some conditions to figure out, then the logic can be very straightforward.
   1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];
   2, If p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1];
   3, If p.charAt(j) == '*': 
   here are two sub conditions:
               1   if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2]  //in this case, a* only counts as empty
               2   if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == '.':
                              dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a 
                           or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a
                           or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty

var isMatch = function(s, p) {
  var dp = [[]], i, j;
  dp[0][0] = true;
  for(i = 0; i <= s.length; ++i){
    i > 0 && dp.push([]);
    for(j = 1; j <= p.length; ++j){
      if(p[j-1] !== '*'){
        dp[i][j] = i > 0 && dp[i-1][j-1] && (s[i-1] === p[j-1] || p[j-1] === '.');
      } else {
        dp[i][j] = dp[i][j-2] || i > 0 && dp[i-1][j] && (s[i-1] === p[j-2] || p[j-2] === '.');
      }
    }
  }
  return dp[s.length][p.length] ? true : false;
};

动态规划

假设 Si = <s1, s2, s3, ..., sm>，Pj = <p1, p2, p3, ..., pn>
dp[i][j] 表示 isMatch(Si, Pj) 的值

初始化：
dp[0][0] = isMatch('', '') = true;
i > 0 && j = 0 时 dp[i][0] = isMatch(Si, '') = false;

状态转移：
分以下两种情况：
pj !== '*'
当i=0时，Pj必然不会匹配空串，因此dp[i][j] = false
当i>0时，若pj = si，那么dp[i][j] = dp[i-1][j-1]；若pj != si，那么dp[i][j] = false

pj === '*'
匹配字符出现'*'，则需要去比较 pj-1 与 si 是否想等
因为'*'也可以匹配0次，所以如果Pj-2匹配Si成功，那么Pj匹配Si也必然成功
https://www.youtube.com/watch?v=qza1UKNHAys
