Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:

"abc" -> "bcd" -> ... -> "xyz"
Given a list of non-empty strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

Example:

Input: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"],
Output: 
[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]

var groupStrings = function(strings) {
    let hash = {};
    let res = [];
    for (let str of strings) {
        let key = '';
        for (let i = 1; i < str.length; i++) {
            let diff = str.charCodeAt(i)-str.charCodeAt(i-1);
            if (diff < 0) diff += 26;
            key += diff;
        };
        if (!hash[key]) {
            hash[key] = [str];
        } else {
            hash[key].push(str);
        }
    };
    for (let key in hash) {
        res.push(hash[key])
    };
    return res;
};
