Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:
Input: [1,2,3]

       1
      / \
     2   3
Output: 6
Example 2:
Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7
Output: 42

// hardest part: start and end points are random....
// value could be negative, so we use 0 to avoid it
var maxPathSum = function(root) {
    if (!root) return root;
    let res = -Infinity; 
    
    var dfs = function(root) {
        if (!root) return root;
        let left = Math.max(0, dfs(root.left));
        let right = Math.max(0, dfs(root.right));
        
        res = Math.max(res, left+right+root.val);
        return root.val + Math.max(left, right)
    }
    dfs(root);
    return res;
};
