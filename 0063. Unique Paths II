A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

var uniquePathsWithObstacles = function(obstacleGrid) {
    if (obstacleGrid === null || obstacleGrid.length === 0 || obstacleGrid[0].length === 0) return 0; 
    let m = obstacleGrid.length, n = obstacleGrid[0].length;
    let dp = new Array(m).fill(0).map(val => new Array(n).fill(0))
    
    for (let i = 0; i < m; i++) {
        if (obstacleGrid[i][0] !== 1) {
            dp[i][0] = 1;
        } else {
            break;
        };
    };
    
    for (let j = 0; j < n; j++) {
        if (obstacleGrid[0][j] !== 1) {
            dp[0][j] = 1;
        } else {
            break;
        };
    };
    
    // besides first row and first col
    for (let i = 1; i < m; i++) {
        for (let j = 1; j < n; j++) {
            if (obstacleGrid[i][j] !== 1) {
                dp[i][j] = dp[i-1][j] + dp[i][j-1]
            };
        };
    };
    return dp[m-1][n-1];
};
