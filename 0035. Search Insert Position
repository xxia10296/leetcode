

35. Search Insert Position
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would 
be if it were inserted in order.
You may assume no duplicates in the array.
Example 1:
Input: [1,3,5,6], 5
Output: 2
Example 2:
Input: [1,3,5,6], 2
Output: 1
Example 3:
Input: [1,3,5,6], 7
Output: 4
Example 4:
Input: [1,3,5,6], 0
Output: 0

Summary: - Use binary. (mostly for sorted array)
         - 2 edge cases when target is smallest & largest.
         
var searchInsert = function(nums, target) {
    if(nums.length === 0 ) return 0;
    
    let left = 0
    let right = nums.length-1;
    // target is largest
    if(target > nums[nums.length-1]) return nums.length;
    // target is smallest
    else if(target <= nums[0]) return 0;
    // target inside the nums
    else {
        while(left <= right) {
            let mid = Math.floor((right+left)/2);
            if(nums[mid] === target) return mid;
            else if(nums[mid] > target) {
                right = mid-1;
            } 
            else {
                left = mid+1;
            }
        }
        return left;
    }
};
