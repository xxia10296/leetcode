Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.
Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32



var rangeSumBST = function(root, L, R) {
    if (!root) return 0;
    if (root.val < L) return rangeSumBST(root.right, L, R);
    if (root.val > R) return rangeSumBST(root.left, L, R);
    return root.val + rangeSumBST(root.left, L, R) + rangeSumBST(root.right, L, R);
};


// var rangeSumBST = function(root, L, R) {
//     if (!root) return 0;
//     let res = 0;
//     var dfs = function(root) {
//         if (!root) return 0;
//         if (L <= root.val && root.val <= R) {
//             res += root.val
//             dfs(root.left);
//             dfs(root.right);
//         } else if (root.val < L) {
//             dfs(root.right);
//         } else {
//             dfs(root.left);
//         }
//     }
//     dfs(root);
//     return res;
// };
