

31. Next Permutation
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place and use only constant extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

Summary: - to find the next bigger number. for example:  12462 --> 14226;   2387 ---> 2738
         - If the given num is already the largest, 321 --> 123, then return the smallest;
	 - the proccess: 1 2 6 4 2
	            step1        we compare a pair from the end. if (4 > 2), then i--
	          step2       if (6>4), i--
	        step3     if (2<6), we swap 2 with the next bigger num, which is 4, we now have 14622 
	     step4    now we get 14[622], and permutate [622] to find the smallest among them
	nstep5    we get 14226

Time complexity : O(n). In worst case, only two scans of the whole array are needed.
Space complexity : O(1). No extra space is used. In place replacements are done.

var nextPermutation = function(nums) {
   if (nums.length < 2) return nums;
   // find the i point to the element right before the decreas string
   var i = nums.length - 2;
   while(i >= 0 && nums[i] >= nums[i + 1]) {    // when left>right, i move to left
       i--;
   }
     
   if (i < 0) return nums.reverse();   // when i<0, we have 54321, return reverse
   
   // find j(the next bigger number) to swap
   var j = i + 1;
   for (j; j < nums.length; j++) {
       if (nums[j] <= nums[i]) {
           break;
       };
   }
   --j;

   //swap i, j
   [nums[i], nums[j]] = [nums[j], nums[i]];
   // reverse the decreasing string
   reverse(nums, i + 1, nums.length - 1);
};

function reverse(nums, left, right) {
   while(left < right) {
       
       [nums[left], nums[right]] = [nums[right], nums[left]];
       left++;
       right--;
   }
}
