Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

// var combinationSum2 = function(candidates, target) {
//     candidates.sort((a, b) => a - b);
//     let res = [], curArr = [];
//     dfs(candidates, target, 0, curArr, res);
//     return res;

// };

// var dfs = function(arr, target, startIndex, curArr, res) {
//     for (let i = startIndex; i < arr.length; i++) {
//         if (arr[i] > target) break;
//         if (i > startIndex && arr[i] === arr[i-1]) continue;
//         curArr.push(arr[i]);
//         dfs(arr, target-arr[i], i+1, curArr, res);
//         curArr.pop();
//     }
//     if (target === 0) {
//         res.push([...curArr])
//     }
// }
